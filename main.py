import os
import logging
import asyncio
import io
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode, ChatAction
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from docx import Document
import PyPDF2
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_SPEECHKIT_API_KEY = os.getenv('YANDEX_SPEECHKIT_API_KEY')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_BOT_TOKEN, YANDEX_API_KEY, YANDEX_SPEECHKIT_API_KEY]):
    raise ValueError("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
);
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
LANGUAGES = {
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
    'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    'de': '–ù–µ–º–µ—Ü–∫–∏–π',
    'it': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
    'ja': '–Ø–ø–æ–Ω—Å–∫–∏–π',
    'zh': '–ö–∏—Ç–∞–π—Å–∫–∏–π',
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã
MAX_TEXT_LENGTH = 10000
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5MB

# ===== –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–í–û–î–ê =====
async def translate_text(text: str, target_lang: str = 'ru') -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex.Translate"""
    if len(text) > MAX_TEXT_LENGTH:
        return f"‚ö† –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"

    url = 'https://translate.api.cloud.yandex.net/translate/v2/translate'
    headers = {
        'Authorization': f'Api-Key {YANDEX_API_KEY}',
        'Content-Type': 'application/json',
    }
    body = {
        'targetLanguageCode': target_lang,
        'texts': [text],
    }
    
    try:
        response = requests.post(url, headers=headers, json=body, timeout=10)
        response.raise_for_status()
        return response.json()['translations'][0]['text']
    except Exception as e:
        logging.error(f"Translation error: {e}")
        return f"‚ö† –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"

async def text_to_speech(text: str, lang: str) -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Yandex SpeechKit"""
    if len(text) > 5000:
        return None
        
    url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
    headers = {"Authorization": f"Api-Key {YANDEX_SPEECHKIT_API_KEY}"}
    voice = "alena" if lang == "ru" else "john"
    
    data = {
        "text": text,
        "lang": lang,
        "voice": voice,
        "format": "mp3",
        "sampleRateHertz": 48000,
    }
    
    try:
        response = requests.post(url, headers=headers, data=data, timeout=15)
        response.raise_for_status()
        return response.content
    except Exception as e:
        logging.error(f"SpeechKit error: {e}")
        return None

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í =====
async def process_document(file_info: types.File, file_type: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        downloaded_file = await bot.download_file(file_info.file_path)
        content = downloaded_file.read()
        
        if file_type == 'docx':
            doc = Document(io.BytesIO(content))
            return '\n'.join([para.text for para in doc.paragraphs])
        elif file_type == 'pdf':
            reader = PyPDF2.PdfReader(io.BytesIO(content))
            return '\n'.join([page.extract_text() for page in reader.pages])
        else:  # txt
            return content.decode('utf-8')
    except Exception as e:
        logging.error(f"Document processing error: {e}")
        return None

async def create_translated_file(text: str, original_filename: str) -> BufferedInputFile:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
    try:
        ext = original_filename.split('.')[-1].lower()
        filename = f"translated_{original_filename}"
        
        if ext == 'docx':
            doc = Document()
            doc.add_paragraph(text)
            buffer = io.BytesIO()
            doc.save(buffer)
            return BufferedInputFile(buffer.getvalue(), filename)
        else:
            return BufferedInputFile(text.encode('utf-8'), filename.replace('.pdf', '.txt'))
    except Exception as e:
        logging.error(f"File creation error: {e}")
        return None

# ===== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª (txt/docx/pdf) –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –¢–µ–∫—Å—Ç: \"Hello\" –∏–ª–∏ \"–ü—Ä–∏–≤–µ—Ç en\"\n"
        "- –§–∞–π–ª: –ø—Ä–∏–∫—Ä–µ–ø–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏ —É–∫–∞–∂–∏ —è–∑—ã–∫ –≤ –ø–æ–¥–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä \"en\")\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "/langs - —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤"
    )

@dp.message(Command("help"))
async def help(message: Message):
    await message.answer(
        "üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞:\n"
        "   –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏ —è–∑—ã–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
        "   –ü—Ä–∏–º–µ—Ä: \"Hello world es\" - –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π\n\n"
        "2. –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n"
        "   –ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª (txt, docx –∏–ª–∏ pdf) –∏ —É–∫–∞–∂–∏ —è–∑—ã–∫ –≤ –ø–æ–¥–ø–∏—Å–∏\n"
        "   –ü—Ä–∏–º–µ—Ä: –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é \"fr\" - –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π\n\n"
        "3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 5MB\n"
        "4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: /langs"
    )

@dp.message(Command("langs"))
async def langs(message: Message):
    langs_list = "\n".join([f"{code} - {name}" for code, name in LANGUAGES.items()])
    await message.answer(f"üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:\n{langs_list}")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====
@dp.message(lambda message: message.document)
async def handle_document(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if message.document.file_size > MAX_FILE_SIZE:
            await message.reply("‚ö† –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 5MB)")
            return
            
        file_ext = message.document.file_name.split('.')[-1].lower()
        if file_ext not in ['txt', 'docx', 'pdf']:
            await message.reply("‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: txt, docx, pdf")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        target_lang = 'ru'
        if message.caption and message.caption in LANGUAGES:
            target_lang = message.caption
        
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        progress_msg = await message.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        file_info = await bot.get_file(message.document.file_id)
        text = await process_document(file_info, file_ext)
        
        if not text:
            await progress_msg.edit_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞")
            return

        # –ü–µ—Ä–µ–≤–æ–¥
        translated_text = await translate_text(text, target_lang)
        if translated_text.startswith("‚ö†"):
            await progress_msg.edit_text(translated_text)
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        translated_file = await create_translated_file(
            translated_text,
            message.document.file_name
        )
        
        if not translated_file:
            await progress_msg.edit_text("‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.reply_document(
            document=translated_file,
            caption=f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {LANGUAGES.get(target_lang, target_lang)}"
        )
        await progress_msg.delete()

    except Exception as e:
        logging.error(f"Document handling error: {e}")
        await message.reply("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

@dp.message()
async def handle_text(message: Message):
    try:
        user_text = message.text
        target_lang = 'ru'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞
        if ' ' in user_text:
            text_parts = user_text.rsplit(' ', 1)
            if text_parts[1] in LANGUAGES:
                user_text = text_parts[0]
                target_lang = text_parts[1]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        if len(user_text) > MAX_TEXT_LENGTH:
            await message.reply(f"‚ö† –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. {MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        progress_msg = await message.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

        # –ü–µ—Ä–µ–≤–æ–¥
        translated_text = await translate_text(user_text, target_lang)
        if translated_text.startswith("‚ö†"):
            await progress_msg.edit_text(translated_text)
            return

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –æ—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–µ–≤–æ–¥
        await progress_msg.edit_text(
            f"üî§ –ü–µ—Ä–µ–≤–æ–¥ ({LANGUAGES.get(target_lang, target_lang)}):\n{translated_text}"
        )

        # –û–∑–≤—É—á–∫–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É)
        audio_data = await text_to_speech(translated_text, target_lang)
        if audio_data:
            await message.reply_voice(
                voice=BufferedInputFile(
                    file=audio_data,
                    filename=f"translation_{target_lang}.mp3"
                ),
                caption="üîä –û–∑–≤—É—á–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"
            )
        else:
            await message.reply("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∑–≤—É—á–∫—É (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤—ã—à–µ)")

    except Exception as e:
        logging.error(f"Text handling error: {e}")
        await message.reply("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(main())
